{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Convergence classes\n",
    "\n",
    "BigDFT uses wavelets on a discretization grid to represent the wavefunction and density of the electronic system. The key parameters of a BigDFT calculation therefore are the grid spacing (noted `hgrids`) and the grid extension (noted `rmult`). The convergence of a given BigDFT calculation with respect to those two parameters can easily be studied via two classes: [HgridsConvergence](https://mmoriniere.gitlab.io/MyBigDFT/hgrids_convergence.html) and [RmultConvergence](https://mmoriniere.gitlab.io/MyBigDFT/rmult_convergence.html). Both will be used here in the case of the N$_2$ molecule with the LDA exchange-correlation potential."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the relevant modules, classes and constant.\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mybigdft import Posinp, Atom, InputParams, Job\n",
    "from mybigdft.globals import EV_TO_HA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## rmult convergence\n",
    "    \n",
    "The `RmultConvergence` class allows to run all the necessary calculations to determine the smallest grid extensions which must be used so that the energy error compared to the reference calculation (*i.e.*, with the largest `rmult` considered) lie within the required precision per atom. Using the smallest `rmult` as possible allows to save computational time because there are less grid points (or degrees of freedom). \n",
    "\n",
    "Note that there actually are two grids centered on the atoms of the system: a fine one with a shorter extension and a coarse one with a longer extension. They respectively correspond to the two numbers in the `reference` list given when initializing the `RmultConvergence` instance. These numbers will be decreased by 1 until the resulting energy lies outside the given `precision_per_atom` (here, 10 meV). The maximal number of jobs to be run is fixed to 6."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mybigdft.workflows.convergences import RmultConvergence\n",
    "\n",
    "atoms = [Atom('N', [0, 0, 0]), Atom('N', [0, 0, 1.1])]\n",
    "pos = Posinp(atoms, units=\"angstroem\", boundary_conditions=\"free\")\n",
    "base = Job(posinp=pos, run_dir=\"N2/rmult_convergence\", name=\"N2\")\n",
    "rmc = RmultConvergence(base, reference=[9, 11], delta=[-1, -1], n_jobs=6,\n",
    "                       precision_per_atom=0.01*EV_TO_HA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The jobs in the queue have an extra attribute `param` which returns the value of rmult:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[9.0, 11.0]\n",
      "[8.0, 10.0]\n",
      "[7.0, 9.0]\n",
      "[6.0, 8.0]\n",
      "[5.0, 7.0]\n",
      "[4.0, 6.0]\n"
     ]
    }
   ],
   "source": [
    "for job in rmc.queue:\n",
    "    print(job.param)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can run the calculations as usual:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/rmult_convergence/9.0_11.0\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/rmult_convergence/8.0_10.0\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/rmult_convergence/7.0_9.0\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/rmult_convergence/6.0_8.0\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/rmult_convergence/5.0_7.0\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/rmult_convergence/4.0_6.0\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rmc.run(nmpi=6, nomp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once the calculations are performed, a converged job is determined. It corresponds to the one with the smallest `rmult` so that the total energy of the system is below the convergence threshold, defined by the sum of the energy found for the largest `rmult` and the user defined precision per atom. It can be accessed via the `converged` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5.0, 7.0]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmc.converged.param"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The result of the previous cell shows that `rmult = [5.0, 7.0]` gives converged results for the given precision per atom. To make sure that everything ran as expected, all the relevant data can be accessed via the `summary` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requested precision per atom: 3.67e-04 (Ha)\n",
      "----------------------------------------------------\n",
      "    rmult     precision_per_atom (Ha)  is_converged \n",
      "----------------------------------------------------\n",
      " [9.0, 11.0]          0.00e+00             True     \n",
      " [8.0, 10.0]          1.09e-06             True     \n",
      "  [7.0, 9.0]          3.71e-06             True     \n",
      "  [6.0, 8.0]          4.96e-06             True     \n",
      "  [5.0, 7.0]          2.75e-04             True     \n",
      "  [4.0, 6.0]          2.31e-03            False     \n"
     ]
    }
   ],
   "source": [
    "rmc.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the convergence\n",
    "\n",
    "The figure below shows the convergence of the total energy of the N$_2$ system with respect to the rmult. The threshold is also shown for comparison."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = [job.logfile.energy\n",
    "            for job in rmc.queue if job.is_completed]\n",
    "rmults = [job.param\n",
    "          for job in rmc.queue if job.is_completed]\n",
    "frmult = [rmult[0] for rmult in rmults]\n",
    "n_at = len(rmc.queue[0].posinp)\n",
    "threshold = min(energies) + n_at*rmc.precision_per_atom\n",
    "\n",
    "fig=plt.figure()\n",
    "fig.patch.set_facecolor('white')  # When dark background\n",
    "plt.plot(frmult, energies,\n",
    "         label=\"BigDFT results\", marker=\"o\", linestyle='')\n",
    "plt.plot(frmult, [threshold]*len(energies),\n",
    "         label=\"Convergence threshold\")\n",
    "plt.xlabel(\"frmult\")\n",
    "plt.ylabel(\"Energy (Ha)\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember that there are actually two grids: one known as the fine grid, the other being the coarse one. The former is more expensive (from a computational point of view) than the latter, and should therefore have a smaller extension. One can perform a more refined rmult convergence by testing the convergence with respect to that fine grid extensions: this will be done after the convergence with respect to `hgrids`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## hgrids convergence\n",
    "\n",
    "The `HgridsConvergence` class allows to run all the necessary calculations to determine the largest `hgrids` which must be used so that the energy error compared to the reference calculation (with the lowest `hgrids` considered) lie within the required precision per atom. Using the largest `hgrids` as possible allows to save computational time because there are less grid points (or degrees of freedom)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mybigdft.workflows.convergences import HgridsConvergence\n",
    "\n",
    "atoms = [Atom('N', [0, 0, 0]), Atom('N', [0, 0, 1.1])]\n",
    "pos = Posinp(atoms, units=\"angstroem\", boundary_conditions=\"free\")\n",
    "inp = InputParams({\"dft\": {\"rmult\": rmc.converged.param}})\n",
    "run_dir = \"N2/hgrids_convergence/rm_{:.1f}_{:.1f}\".format(*rmc.converged.param)\n",
    "base = Job(inputparams=inp, posinp=pos, run_dir=run_dir, name=\"N2\")\n",
    "hgc = HgridsConvergence(base, reference=0.24, delta=0.02,\n",
    "                        precision_per_atom=0.01*EV_TO_HA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The jobs in the queue have an extra attribute `hgrids`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.24, 0.24, 0.24]\n",
      "[0.26, 0.26, 0.26]\n",
      "[0.28, 0.28, 0.28]\n",
      "[0.3, 0.3, 0.3]\n",
      "[0.32, 0.32, 0.32]\n",
      "[0.34, 0.34, 0.34]\n",
      "[0.36, 0.36, 0.36]\n",
      "[0.38, 0.38, 0.38]\n",
      "[0.4, 0.4, 0.4]\n",
      "[0.42, 0.42, 0.42]\n"
     ]
    }
   ],
   "source": [
    "for job in hgc.queue:\n",
    "    print(job.param)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can run the calculations as usual:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/0.24_0.24_0.24\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/0.26_0.26_0.26\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/0.28_0.28_0.28\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/0.30_0.30_0.30\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/0.32_0.32_0.32\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/0.34_0.34_0.34\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/0.36_0.36_0.36\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/0.38_0.38_0.38\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/mybigdft/workflows/workflow.py:114: UserWarning: Some jobs of the workflow were not run.\n",
      "  UserWarning)\n"
     ]
    }
   ],
   "source": [
    "hgc.run(nmpi=6, nomp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that not all calculations were run: this is because the job with `hgrids` = 0.38 gave an energy that was above the requested precision per atom.\n",
    "\n",
    "Once the calculations are performed, a converged job is determined. It corresponds to the one with the largest `hgrids` so that the total energy of the system is below the convergence threshold. It can be accessed via the `converged` attribute. Its `param` attribute can in turns be accessed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.36, 0.36, 0.36]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hgc.converged.param"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The result of the previous cell shows that `hgrids = 0.36` gives converged results for the given precision per atom. To make sure that everything ran as expected, all the relevant data can be accessed as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requested precision per atom: 3.67e-04 (Ha)\n",
      "-----------------------------------------------------------\n",
      "       hgrids        precision_per_atom (Ha)  is_converged \n",
      "-----------------------------------------------------------\n",
      " [0.24, 0.24, 0.24]          0.00e+00             True     \n",
      " [0.26, 0.26, 0.26]          3.89e-07             True     \n",
      " [0.28, 0.28, 0.28]          2.63e-05             True     \n",
      " [0.30, 0.30, 0.30]          4.53e-05             True     \n",
      " [0.32, 0.32, 0.32]          1.23e-04             True     \n",
      " [0.34, 0.34, 0.34]          1.88e-04             True     \n",
      " [0.36, 0.36, 0.36]          3.46e-04             True     \n",
      " [0.38, 0.38, 0.38]          5.86e-04            False     \n"
     ]
    }
   ],
   "source": [
    "hgc.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It shows that everything ran as expected: the calculation with `hgrids = 0.36` has the largest `hgrids` while still having an energy below the requested threshold."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the convergence\n",
    "\n",
    "The figure below shows the convergence of the total energy of the N$_2$ system with respect to `hgrids`. The threshold value is also shown for comparison."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = [job.logfile.energy\n",
    "            for job in hgc.queue if job.is_completed]\n",
    "hgrids = [job.param \n",
    "          for job in hgc.queue if job.is_completed]\n",
    "simple_hgrids = [hgrid[0] for hgrid in hgrids]\n",
    "n_at = len(hgc.queue[0].posinp)\n",
    "threshold = min(energies) + n_at*hgc.precision_per_atom\n",
    "\n",
    "fig=plt.figure()\n",
    "fig.patch.set_facecolor('white')  # When dark background\n",
    "plt.plot(simple_hgrids, energies,\n",
    "         label=\"BigDFT results\", marker=\"o\", linestyle='')\n",
    "plt.plot(simple_hgrids, [threshold]*len(energies),\n",
    "         label=\"Convergence threshold\")\n",
    "plt.xlabel(\"hgrid along $x$\")\n",
    "plt.ylabel(\"Energy (Ha)\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## frmult convergence\n",
    "\n",
    "We started the convergence study with a coarse grid having a larger extension than the fine grid. This means that the coarse grid extension is converged, but there might still be some room to use a smaller fine grid. This is the reason why the convergence study ends by looking only at the fine grid extension multiplying factor `frmult` (note that the delta value for `crmult` is 0):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "[frm, crm] = rmc.converged.param\n",
    "frmc = RmultConvergence(base, reference=[frm+2, crm], delta=[-1, 0],\n",
    "                        n_jobs=5, precision_per_atom=0.01*EV_TO_HA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/7.0_7.0\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/6.0_7.0\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/5.0_7.0\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n",
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/doc/source/notebooks/N2/hgrids_convergence/rm_5.0_7.0/4.0_7.0\n",
      "Logfile log-N2.yaml already exists!\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/maximemoriniere/Documents/Python/MyBigDFT/mybigdft/workflows/workflow.py:114: UserWarning: Some jobs of the workflow were not run.\n",
      "  UserWarning)\n"
     ]
    }
   ],
   "source": [
    "frmc.run(nmpi=6, nomp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nothing changed: `frmult = 5.0` gives converged results for the given precision:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requested precision per atom: 3.67e-04 (Ha)\n",
      "---------------------------------------------------\n",
      "   rmult     precision_per_atom (Ha)  is_converged \n",
      "---------------------------------------------------\n",
      " [7.0, 7.0]          0.00e+00             True     \n",
      " [6.0, 7.0]          1.17e-05             True     \n",
      " [5.0, 7.0]          1.55e-04             True     \n",
      " [4.0, 7.0]          1.93e-03            False     \n"
     ]
    }
   ],
   "source": [
    "frmc.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = [job.logfile.energy \n",
    "            for job in frmc.queue if job.is_completed]\n",
    "rmults = [job.param\n",
    "          for job in frmc.queue if job.is_completed]\n",
    "frmult = [rmult[0] for rmult in rmults]\n",
    "n_at = len(frmc.queue[0].posinp)\n",
    "threshold = min(energies) + n_at*frmc.precision_per_atom\n",
    "fig=plt.figure()\n",
    "fig.patch.set_facecolor('white')  # When dark background\n",
    "plt.plot(frmult, energies,\n",
    "         label=\"BigDFT results\", marker=\"o\", linestyle='')\n",
    "plt.plot(frmult, [threshold]*len(energies),\n",
    "         label=\"Convergence threshold\")\n",
    "plt.xlabel(\"frmult\")\n",
    "plt.ylabel(\"Energy (Ha)\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "\n",
    "The convergence with a precision per atom of 10 meV for the N$_2$ molecule is found using `hgrids = 0.36` and `rmult = [5.0, 7.0]` as input parameters for a BigDFT calculation."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
